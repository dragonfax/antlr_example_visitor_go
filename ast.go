/* nodes used in the AST generated by StructVisitor */
package main

import (
	"fmt"
	"strings"
)

type Node interface {
	String() string
}

type FieldListNode []*FieldNode

func (fl FieldListNode) String() string {
	list := make([]string, len(fl))
	for i, s := range fl {
		list[i] = s.String()
	}
	return fmt.Sprintf(strings.Join(list, "\n"))
}

type FieldNode struct {
	Name string
	Type string
}

func (fn *FieldNode) String() string {
	return fmt.Sprintf("%s %s", fn.Name, fn.Type)
}

type ClassNode struct {
	Name   string
	Fields FieldListNode
}

func (cn *ClassNode) String() string {
	return fmt.Sprintf("type %s struct {\n%s\n}\n", cn.Fields)
}
